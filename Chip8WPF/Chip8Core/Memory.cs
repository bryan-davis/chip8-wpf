using System;

namespace Chip8WPF.Chip8Core
{
    [Serializable]
    class Memory
    {
        // http://mattmik.com/chip8.html contains information regarding fonts
        private static readonly byte[] fonts =
        {
            0xF0, 0x90, 0x90, 0x90, 0xF0,   // 0
            0x20, 0x60, 0x20, 0x20, 0x70,   // 1
            0xF0, 0x10, 0xF0, 0x80, 0xF0,   // 2
            0xF0, 0x10, 0xF0, 0x10, 0xF0,   // 3
            0x90, 0x90, 0xF0, 0x10, 0x10,   // 4
            0xF0, 0x80, 0xF0, 0x10, 0xF0,   // 5
            0xF0, 0x80, 0xF0, 0x90, 0xF0,   // 6
            0xF0, 0x10, 0x20, 0x40, 0x40,   // 7
            0xF0, 0x90, 0xF0, 0x90, 0xF0,   // 8
            0xF0, 0x90, 0xF0, 0x10, 0xF0,   // 9
            0xF0, 0x90, 0xF0, 0x90, 0x90,   // A
            0xE0, 0x90, 0xE0, 0x90, 0xE0,   // B
            0xF0, 0x80, 0x80, 0x80, 0xF0,   // C
            0xE0, 0x90, 0x90, 0x90, 0xE0,   // D
            0xF0, 0x80, 0xF0, 0x80, 0xF0,   // E
            0xF0, 0x80, 0xF0, 0x80, 0x80    // F
        };

        public byte[] Bytes { get; private set; }

        public Memory()
        {
            // Chip8 memory is 4 KiB
            Bytes = new byte[4096];
            Array.Copy(fonts, Bytes, fonts.Length);
        }

        public byte this[int index]
        {
            get { return Bytes[index]; }
            set { Bytes[index] = value; }
        }
    }
}
